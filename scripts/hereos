#!/usr/bin/env python

import getopt
import sys
import yaml
import io
import os
import shutil

def usage():
		"""Print usage information"""
		print "Welcome to the HereOS SDK"
		print ""
		print "Usage: hereos [--help|-h|--version|-v] [COMMAND]"
		print "\tinit <path>\tInitializes a new HereOS project at the specified path"
		print "\tlist-services\tShows a list of available microsservices and their installation status"
		print "\tenable-service <service_name>\tAdds a microservice to the current project's build"
		print "\tcreate-service <service_name>\tCreates a new microservice template and adds it to the build"
		print "\tdisable-service <service_name>\tRemoves a microservice from the current project's build"
		print "\tbuild\tBuilds a device image"
		print "\tdeploy\tDeploys the built image to the current device (if OTA is enabled)"
		print ""


def version():
		"""Print the version string"""
		print "HereOS Version: 0.0.1\n"

def list_services():
		"""Print a list of available SDK services"""
		print "Available microservices in the HereOS SDK:\n"
		for service in yaml.load(io.open(os.path.join(sdk_config_folder(), "services.yaml"), "r")):
				print "\t%s\t%s" % (service["name"], service["description"])
		print ""

def sdk_config_folder():
		"""Returns the path to the SDK config folder"""
		return os.path.join(sdk_folder(), "config")

def sdk_folder():
		"""Returns the path to the folder where the SDK is installed"""
		return os.path.realpath(os.path.join(os.path.dirname(__file__), ".."))

def init_sdk_project(path):
		"""Creates a new SDK project in the current working directory"""
		print "SDK folder: %s" % sdk_folder()
		target = path if os.path.isabs(path) else os.path.join(os.getcwd(), path)

		# Create target folder
		print "Creating project target folder: %s" % target	
		try:
				os.makedirs(target)
		except OSError as err:
				print "Error creating project folder: '%s'" % format(err)
				print "Check permissions and try again"
				sys.exit(2)

		# Create folder structure
		os.mkdir(os.path.join(target, "config"))

		# Copy default config
		shutil.copyfile(os.path.join(sdk_config_folder(), "services.yaml"),
										os.path.join(target, "config", "services.yaml"))


def main():
		"""Main entry point for CLI"""
		if len(sys.argv) == 1:
				usage()
				sys.exit()

		# Process option arguments
		try:
				opts, args = getopt.getopt(sys.argv[1:], "hv", ["help", "version"])
		except getopt.GetoptError as err:
				# print help information and exit:
				print str(err)
				usage()
				sys.exit(2)
		for o, a in opts:
				if o in ("-v", "--version"):
						version()
						sys.exit()
	 			elif o in ("-h", "--help"):
						usage()
						sys.exit()
				elif o in ("-l", "--list-services"):
						list_services()
						sys.exit()
				else:
						assert False, "unhandled option"

		# Switch on main command
		try:
				{
						'list-services': lambda x: list_services(),
						'init': 				 lambda x: init_sdk_project(*x)
				}[args[0]](args[1:])
		except KeyError:
				print "Unknown command: '%s'\n" % args[0]
				usage()
				sys.exit(2)

if __name__ == "__main__":
		main()

# vim: tabstop=4 shiftwidth=4 noexpandtab

